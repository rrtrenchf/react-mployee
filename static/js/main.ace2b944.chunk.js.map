{"version":3,"sources":["logo.svg","components/searchForm.js","components/EmpTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchForm","props","className","htmlFor","onChange","handleInputChange","value","search","name","type","placeholder","id","onClick","sort","EmpTable","console","log","findEmp","Emp","filter","employee","first","toLowerCase","includes","last","map","key","src","picture","thumbnail","dob","age","App","state","firstName","lastName","event","target","setState","preventDefault","axios","get","then","res","emp","data","results","image","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,gLCmC5BC,MA/Bf,SAAoBC,GAUlB,OACE,8BACE,yBAAKC,UAAU,cACb,2BAAOC,QAAQ,UAAf,WACA,2BACEC,SAAUH,EAAMI,kBAChBC,MAAOL,EAAMM,OACbC,KAAK,SACLC,KAAK,OACLP,UAAU,eACVQ,YAAY,yBACZC,GAAG,WAEL,4BAAQC,QAASX,EAAMY,KAAMX,UAAU,wBAAvC,oBCIOY,MA3Bf,SAAkBb,GAAQ,IAAD,EACrBc,QAAQC,IAAI,CAAEf,UACd,IAAMgB,EAAO,UAAGhB,EAAMiB,WAAT,aAAG,EAAWC,QAAO,SAAAC,GAAQ,OAAIA,EAASZ,KAAKa,MAAMC,cAAcC,SAAStB,EAAMM,OAAOe,gBAAkBF,EAASZ,KAAKgB,KAAKF,cAAcC,SAAStB,EAAMM,OAAOe,kBAC/K,OACI,+BACI,4BACI,qCACA,4CACA,yCACA,oCALR,OASKL,QATL,IASKA,OATL,EASKA,EAASQ,KAAI,SAAAL,GAAQ,OAClB,wBAAIM,IAAKN,EAAST,IACd,4BAAI,yBAAKgB,IAAKP,EAASQ,QAAQC,aAC/B,4BAAKT,EAASZ,KAAKa,OACnB,4BAAKD,EAASZ,KAAKgB,MACnB,4BAAKJ,EAASU,IAAIC,WCwDvBC,E,4MApEbC,MAAM,CAACC,UAAU,GACfC,SAAS,GACTJ,IAAK,GACLxB,OAAQ,GACRW,IAAI,I,EAyBNb,kBAAoB,SAAA+B,GAElB,IAAI9B,EAAQ8B,EAAMC,OAAO/B,MACnBE,EAAO4B,EAAMC,OAAO7B,KAG1B,EAAK8B,SAAL,eACG9B,EAAOF,K,EAGZO,KAAO,SAAAuB,GACLA,EAAMG,iBAEJ,EAAK/B,KAAKU,K,kEAnCO,IAAD,OAClB,OAAOsB,IAAMC,IACX,yCAAyCC,MAAK,SAAAC,GAC5C,EAAKL,SAAS,CAAEM,IAAKD,EAAIE,KAAKC,UAC9B/B,QAAQC,IAAI2B,EAAIE,MAChB,IAAMX,EAAYS,EAAIE,KAAKC,QAAQ,GAAGtC,KAAKa,MACrCc,EAAWQ,EAAIE,KAAKC,QAAQ,GAAGtC,KAAKgB,KACpCuB,EAAQJ,EAAIE,KAAKC,QAAQ,GAAGlB,QAAQC,UACpCE,EAAMY,EAAIE,KAAKC,QAAQ,GAAGhB,IAAIC,IAEpChB,QAAQC,IAAIkB,GACZnB,QAAQC,IAAImB,GACZpB,QAAQC,IAAI+B,GACZhC,QAAQC,IAAIe,Q,+BA4BR,IAAD,EAC8BiB,KAAKf,MADnC,EACAC,UADA,EACUC,SADV,EACmBJ,IADnB,EACuBgB,MAC9B,OACE,6BACC,kBAAC,EAAD,CACAxC,OAAUyC,KAAKf,MAAM1B,OACrBF,kBAAmB2C,KAAK3C,oBAGxB,kBAAC,EAAD,CACAa,IAAO8B,KAAKf,MAAMW,IAClBrC,OAAUyC,KAAKf,MAAM1B,c,GA5DV0C,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.ace2b944.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\n\n\nfunction SearchForm(props) {\n    // Setting the component's initial state\n//   state = {\n//     firstName: \"\",\n//     lastName: \"\",\n//     password: \"\"\n//   };\n\n  \n    \n  return (\n    <form>\n      <div className=\"form-group\">\n        <label htmlFor=\"search\">Search:</label>\n        <input\n          onChange={props.handleInputChange}\n          value={props.search}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search for an employee\"\n          id=\"search\"\n        />\n        <button onClick={props.sort} className=\"btn btn-primary mt-3\">\n          Sort by name!\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\"\nimport seachrForm from \"./searchForm\"\n\n\nfunction EmpTable(props) {\n    console.log({ props })\n    const findEmp = props.Emp?.filter(employee => employee.name.first.toLowerCase().includes(props.search.toLowerCase()) || employee.name.last.toLowerCase().includes(props.search.toLowerCase()));\n    return (\n        <table>\n            <tr>\n                <th>Image</th>\n                <th>-First Name-</th>\n                <th>Last Name</th>\n                <th>Age</th>\n\n\n            </tr>\n            {findEmp?.map(employee => (\n                <tr key={employee.id}>\n                    <td><img src={employee.picture.thumbnail} /></td>\n                    <td>{employee.name.first}</td>\n                    <td>{employee.name.last}</td>\n                    <td>{employee.dob.age}</td>\n\n                </tr>\n            ))}\n        </table>\n    )\n}\n\n\nexport default EmpTable ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios'\nimport SearchForm from \"./components/searchForm\"\nimport EmpTable from \"./components/EmpTable\"\n\n\n\nclass App extends React.Component {\n  state={firstName:\"\",\n    lastName:\"\",\n    age: \"\",\n    search: \"\",\n    Emp:[]\n    \n  }\n  componentDidMount() {\n    return axios.get(\n      \"https://randomuser.me/api/?results=10\").then(res => {\n        this.setState({ emp: res.data.results });\n        console.log(res.data)\n        const firstName = res.data.results[0].name.first\n        const lastName = res.data.results[0].name.last\n        const image = res.data.results[0].picture.thumbnail\n        const age = res.data.results[0].dob.age\n\n        console.log(firstName)\n        console.log(lastName)\n        console.log(image)\n        console.log(age)\n        \n\n      });\n\n\n\n  }\n  // changeHandler = e => this.setstate ({[e.target.name]: e.targe})\n  handleInputChange = event => {\n    // Getting the value and name of the input which triggered the change\n    let value = event.target.value;\n    const name = event.target.name;\n\n    // Updating the input's state\n    this.setState({\n      [name]: value\n    });\n  };\n  sort = event => {\n    event.preventDefault()\n    let empCopy=[\n      this.name.Emp\n    ]\n\n  }\n\n\n  render() {\n    const {firstName,lastName,age,image}=this.state\n    return (\n      <div>\n       <SearchForm\n       search = {this.state.search}\n       handleInputChange={this.handleInputChange}\n       \n       />\n       <EmpTable\n       Emp = {this.state.emp}\n       search = {this.state.search}\n       />\n    </div>\n      \n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}